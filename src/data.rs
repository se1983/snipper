
pub mod resp_body {
    use serde::{Serialize, Deserialize};

    #[derive(Serialize, Deserialize, Debug)]
    pub struct File {
        path: String,
    }

    #[derive(Serialize, Deserialize, Debug)]
    pub struct SnippetResponse {
        pub(crate) id: usize,
        file_name: String,
        files: Vec<File>,
        web_url: String,
    }
}

pub mod req_body {
    use serde::{Serialize, Deserialize};

    #[derive(Serialize, Deserialize, Debug)]
    pub struct CreateFile {
        content: String,
        file_path: String,
    }

    impl CreateFile {
        fn new(file_path: &str, content: &str) -> CreateFile {
            CreateFile {
                file_path: file_path.to_string(),
                content: content.to_string(),
            }
        }
    }

    #[derive(Serialize, Deserialize, Debug)]
    pub struct UploadNewFile {
        action: String,
        content: String,
        file_path: String,
    }

    impl UploadNewFile {
        fn new(file_path: &str, content: &str) -> UploadNewFile {
            UploadNewFile {
                file_path: file_path.to_string(),
                content: content.to_string(),
                action: "create".to_string(),
            }
        }
    }

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Update {
        files: Vec<UploadNewFile>,
    }

    impl Update {
        pub fn new(file_path: &str, file_content: &str) -> Update {
            let file = UploadNewFile::new(file_path, file_content);
            Update {
                files: vec![file]
            }
        }
    }


    #[derive(Serialize, Deserialize, Debug)]
    pub struct CreateSnippet {
        title: String,
        description: String,
        visibility: String,
        files: Vec<CreateFile>,
    }

    impl CreateSnippet {
        pub(crate) fn new(title: &str) -> CreateSnippet {
            let datetime_now = &chrono::offset::Local::now().to_string();
            let file = CreateFile::new("init.txt", datetime_now);
            CreateSnippet {
                title: title.to_string(),
                description: "Autogenerated snippet".to_string(),
                visibility: "internal".to_string(),
                files: vec![file],
            }
        }
    }
}



